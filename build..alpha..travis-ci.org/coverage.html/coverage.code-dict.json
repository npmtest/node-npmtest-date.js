{"/home/travis/build/npmtest/node-npmtest-date.js/test.js":"/* istanbul instrument in package npmtest_date_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-date.js/lib.npmtest_date.js.js":"/* istanbul instrument in package npmtest_date_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_date_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_date_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-date.js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-date.js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_date_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_date_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_date_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_date_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_date_js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_date_js.__dirname + '/lib.npmtest_date_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-date.js/node_modules/date.js/index.js":"/**\n * Expose `Date`\n */\n\nmodule.exports = require('./lib/parser');\n","/home/travis/build/npmtest/node-npmtest-date.js/node_modules/date.js/lib/parser.js":"/**\n * Module Dependencies\n */\n\nvar debug = require('debug')('date:parser')\nvar date = require('./date')\nvar norm = require('./norm')\n\n/**\n * Days\n */\n\nvar days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\nvar months = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september',\n              'october', 'november', 'december' ]\n\n/**\n * Regexs\n */\n\n// 5, 05, 5:30, 5.30, 05:30:10, 05:30.10, 05.30.10, at 5\nvar rMeridiem = /^(\\d{1,2})([:.](\\d{1,2}))?([:.](\\d{1,2}))?\\s*([ap]m)/;\nvar rHourMinute = /^(\\d{1,2})([:.](\\d{1,2}))([:.](\\d{1,2}))?/;\nvar rAtHour = /^at\\s?(\\d{1,2})$/;\nvar rDays = /\\b(sun(day)?|mon(day)?|tues(day)?|wed(nesday)?|thur(sday|s)?|fri(day)?|sat(urday)?)s?\\b/;\nvar rMonths = /^((\\d{1,2})\\s*(st|nd|rd|th))\\s(of\\s)?(january|february|march|april|may|june|july|august|september|october|november|december)/i;\nvar rPast = /\\b(last|yesterday|ago)\\b/;\nvar rDayMod = /\\b(morning|noon|afternoon|night|evening|midnight)\\b/;\nvar rAgo = /^(\\d*)\\s?\\b(second|minute|hour|day|week|month|year)[s]?\\b\\s?ago$/;\n\n/**\n * Expose `parser`\n */\n\nmodule.exports = parser;\n\n/**\n * Initialize `parser`\n *\n * @param {String} str\n * @return {Date}\n * @api publics\n */\n\nfunction parser(str, offset) {\n  // normalize string before parsing, using maps.json\n  str = norm(str)\n  if(!(this instanceof parser)) return new parser(str, offset);\n  if(typeof offset == 'string') offset = parser(offset);\n  var d = offset || new Date;\n  this.date = new date(d);\n  this.original = str;\n  this.str = str.toLowerCase();\n  this.stash = [];\n  this.tokens = [];\n  while (this.advance() !== 'eos');\n  debug('tokens %j', this.tokens)\n  this.nextTime(d);\n  if (this.date.date == d) throw new Error('Invalid date');\n  return this.date.date;\n};\n\n/**\n * Advance a token\n */\n\nparser.prototype.advance = function() {\n  var tok = this.eos()\n    || this.space()\n    || this._next()\n    || this.last()\n    || this.dayByName()\n    || this.monthByName()\n    || this.timeAgo()\n    || this.ago()\n    || this.yesterday()\n    || this.tomorrow()\n    || this.noon()\n    || this.midnight()\n    || this.night()\n    || this.evening()\n    || this.afternoon()\n    || this.morning()\n    || this.tonight()\n    || this.meridiem()\n    || this.hourminute()\n    || this.athour()\n    || this.week()\n    || this.month()\n    || this.year()\n    || this.second()\n    || this.minute()\n    || this.hour()\n    || this.day()\n    || this.number()\n    || this.string()\n    || this.other();\n\n  this.tokens.push(tok);\n  return tok;\n};\n\n/**\n * Lookahead `n` tokens.\n *\n * @param {Number} n\n * @return {Object}\n * @api private\n */\n\nparser.prototype.lookahead = function(n){\n  var fetch = n - this.stash.length;\n  if (fetch == 0) return this.lookahead(++n);\n  while (fetch-- > 0) this.stash.push(this.advance());\n  return this.stash[--n];\n};\n\n/**\n * Lookahead a single token.\n *\n * @return {Token}\n * @api private\n */\n\nparser.prototype.peek = function() {\n  return this.lookahead(1);\n};\n\n/**\n * Fetch next token including those stashed by peek.\n *\n * @return {Token}\n * @api private\n */\n\nparser.prototype.next = function() {\n  var tok = this.stashed() || this.advance();\n  return tok;\n};\n\n/**\n * Return the next possibly stashed token.\n *\n * @return {Token}\n * @api private\n */\n\nparser.prototype.stashed = function() {\n  var stashed = this.stash.shift();\n  return stashed;\n};\n\n/**\n * Consume the given `len`.\n *\n * @param {Number|Array} len\n * @api private\n */\n\nparser.prototype.skip = function(len){\n  this.str = this.str.substr(Array.isArray(len)\n    ? len[0].length\n    : len);\n};\n\n/**\n * EOS\n */\n\nparser.prototype.eos = function() {\n  if (this.str.length) return;\n  return 'eos';\n};\n\n/**\n * Space\n */\n\nparser.prototype.space = function() {\n  var captures;\n  if (captures = /^([ \\t]+)/.exec(this.str)) {\n    this.skip(captures);\n    return this.advance();\n  }\n};\n\n/**\n * Second\n */\n\nparser.prototype.second = function() {\n  var captures;\n  if (captures = /^s(ec|econd)?s?/.exec(this.str)) {\n    this.skip(captures);\n    return 'second';\n  }\n};\n\n/**\n * Minute\n */\n\nparser.prototype.minute = function() {\n  var captures;\n  if (captures = /^m(in|inute)?s?/.exec(this.str)) {\n    this.skip(captures);\n    return 'minute';\n  }\n};\n\n/**\n * Hour\n */\n\nparser.prototype.hour = function() {\n  var captures;\n  if (captures = /^h(r|our)s?/.exec(this.str)) {\n    this.skip(captures);\n    return 'hour';\n  }\n};\n\n/**\n * Day\n */\n\nparser.prototype.day = function() {\n  var captures;\n  if (captures = /^d(ay)?s?/.exec(this.str)) {\n    this.skip(captures);\n    return 'day';\n  }\n};\n\n/**\n * Day by name\n */\n\nparser.prototype.dayByName = function() {\n  var captures;\n  var r = new RegExp('^' + rDays.source);\n  if (captures = r.exec(this.str)) {\n    var day = captures[1];\n    this.skip(captures);\n    this.date[day](1);\n    return captures[1];\n  }\n};\n\n\n/**\n * Month by name\n */\n\nparser.prototype.monthByName = function() {\n  var captures;\n  if (captures = rMonths.exec(this.str)) {\n    var day = captures[2]\n    var month = captures[5];\n    this.date.date.setMonth((months.indexOf(month)));\n    if (day) this.date.date.setDate(parseInt(day));\n    this.skip(captures);\n    return captures[0];\n  }\n};\n\n\nparser.prototype.timeAgo = function() {\n  var captures;\n  if (captures = rAgo.exec(this.str)) {\n    var num = captures[1];\n    var mod = captures[2];\n    this.date[mod](-num);\n    this.skip(captures);\n    return 'timeAgo';\n  }\n};\n\n/**\n * Week\n */\n\nparser.prototype.week = function() {\n  var captures;\n  if (captures = /^w(k|eek)s?/.exec(this.str)) {\n    this.skip(captures);\n    return 'week';\n  }\n};\n\n/**\n * Month\n */\n\nparser.prototype.month = function() {\n  var captures;\n  if (captures = /^mon(th)?(es|s)?\\b/.exec(this.str)) {\n    this.skip(captures);\n    return 'month';\n  }\n\n};\n\n/**\n * Week\n */\n\nparser.prototype.year = function() {\n  var captures;\n  if (captures = /^y(r|ear)s?/.exec(this.str)) {\n    this.skip(captures);\n    return 'year';\n  }\n};\n\n/**\n * Meridiem am/pm\n */\n\nparser.prototype.meridiem = function() {\n  var captures;\n  if (captures = rMeridiem.exec(this.str)) {\n    this.skip(captures);\n    this.time(captures[1], captures[3], captures[5], captures[6]);\n    return 'meridiem';\n  }\n};\n\n/**\n * Hour Minute (ex. 12:30)\n */\n\nparser.prototype.hourminute = function() {\n  var captures;\n  if (captures = rHourMinute.exec(this.str)) {\n    this.skip(captures);\n    this.time(captures[1], captures[3], captures[5], this._meridiem);\n    return 'hourminute';\n  }\n};\n\n/**\n * At Hour (ex. at 5)\n */\n\nparser.prototype.athour = function() {\n  var captures;\n  if (captures = rAtHour.exec(this.str)) {\n    this.skip(captures);\n    this.time(captures[1], 0, 0, this._meridiem);\n    this._meridiem = null;\n    return 'athour';\n  }\n};\n\n/**\n * Time set helper\n */\n\nparser.prototype.time = function(h, m, s, meridiem) {\n  var d = this.date;\n  var before = d.clone();\n\n  if (meridiem) {\n    // convert to 24 hour\n    h = ('pm' == meridiem && 12 > h) ? +h + 12 : h; // 6pm => 18\n    h = ('am' == meridiem && 12 == h) ? 0 : h; // 12am => 0\n  }\n\n  m = (!m && d.changed('minutes')) ? false : m;\n  s = (!s && d.changed('seconds')) ? false : s;\n  d.time(h, m, s);\n};\n\n/**\n * Best attempt to pick the next time this date will occur\n *\n * TODO: place at the end of the parsing\n */\n\nparser.prototype.nextTime = function(before) {\n  var d = this.date;\n  var orig = this.original;\n\n  if (before <= d.date || rPast.test(orig)) return this;\n\n  // If time is in the past, we need to guess at the next time\n  if (rDays.test(orig)) {\n    d.day(7);\n  } else if ((before - d.date) / 1000 > 60) {\n    // If it is a month in the past, don't add a day\n    if (rMonths.test(orig)) {\n      d.day(0);\n    } else {\n      d.day(1);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Yesterday\n */\n\nparser.prototype.yesterday = function() {\n  var captures;\n  if (captures = /^(yes(terday)?)/.exec(this.str)) {\n    this.skip(captures);\n    this.date.day(-1);\n    return 'yesterday';\n  }\n};\n\n/**\n * Tomorrow\n */\n\nparser.prototype.tomorrow = function() {\n  var captures;\n  if (captures = /^tom(orrow)?/.exec(this.str)) {\n    this.skip(captures);\n    this.date.day(1);\n    return 'tomorrow';\n  }\n};\n\n/**\n * Noon\n */\n\nparser.prototype.noon = function() {\n  var captures;\n  if (captures = /^noon\\b/.exec(this.str)) {\n    this.skip(captures);\n    var before = this.date.clone();\n    this.date.date.setHours(12, 0, 0);\n    return 'noon';\n  }\n};\n\n/**\n * Midnight\n */\n\nparser.prototype.midnight = function() {\n  var captures;\n  if (captures = /^midnight\\b/.exec(this.str)) {\n    this.skip(captures);\n    var before = this.date.clone();\n    this.date.date.setHours(0, 0, 0);\n    return 'midnight';\n  }\n};\n\n/**\n * Night (arbitrarily set at 7pm)\n */\n\nparser.prototype.night = function() {\n  var captures;\n  if (captures = /^night\\b/.exec(this.str)) {\n    this.skip(captures);\n    this._meridiem = 'pm';\n    var before = this.date.clone();\n    this.date.date.setHours(19, 0, 0);\n    return 'night'\n  }\n};\n\n/**\n * Evening (arbitrarily set at 5pm)\n */\n\nparser.prototype.evening = function() {\n  var captures;\n  if (captures = /^evening\\b/.exec(this.str)) {\n    this.skip(captures);\n    this._meridiem = 'pm';\n    var before = this.date.clone();\n    this.date.date.setHours(17, 0, 0);\n    return 'evening'\n  }\n};\n\n/**\n * Afternoon (arbitrarily set at 2pm)\n */\n\nparser.prototype.afternoon = function() {\n  var captures;\n  if (captures = /^afternoon\\b/.exec(this.str)) {\n    this.skip(captures);\n    this._meridiem = 'pm';\n    var before = this.date.clone();\n\n    if (this.date.changed('hours')) return 'afternoon';\n\n    this.date.date.setHours(14, 0, 0);\n    return 'afternoon';\n  }\n};\n\n\n/**\n * Morning (arbitrarily set at 8am)\n */\n\nparser.prototype.morning = function() {\n  var captures;\n  if (captures = /^morning\\b/.exec(this.str)) {\n    this.skip(captures);\n    this._meridiem = 'am';\n    var before = this.date.clone();\n    if (!this.date.changed('hours')) this.date.date.setHours(8, 0, 0);\n    return 'morning';\n  }\n};\n\n/**\n * Tonight\n */\n\nparser.prototype.tonight = function() {\n  var captures;\n  if (captures = /^tonight\\b/.exec(this.str)) {\n    this.skip(captures);\n    this._meridiem = 'pm';\n    return 'tonight';\n  }\n};\n\n/**\n * Next time\n */\n\nparser.prototype._next = function() {\n  var captures;\n  if (captures = /^next/.exec(this.str)) {\n    this.skip(captures);\n    var d = new Date(this.date.date);\n    var mod = this.peek();\n\n    // If we have a defined modifier, then update\n    if (this.date[mod]) {\n      this.next();\n      // slight hack to modify already modified\n      this.date = date(d);\n      this.date[mod](1);\n    } else if (rDayMod.test(mod)) {\n      this.date.day(1);\n    }\n\n    return 'next';\n  }\n};\n\n/**\n * Last time\n */\n\nparser.prototype.last = function() {\n  var captures;\n  if (captures = /^last/.exec(this.str)) {\n    this.skip(captures);\n    var d = new Date(this.date.date);\n    var mod = this.peek();\n\n    // If we have a defined modifier, then update\n    if (this.date[mod]) {\n      this.next();\n      // slight hack to modify already modified\n      this.date = date(d);\n      this.date[mod](-1);\n    } else if (rDayMod.test(mod)) {\n      this.date.day(-1);\n    }\n\n    return 'last';\n  }\n};\n\n/**\n * Ago\n */\n\nparser.prototype.ago = function() {\n  var captures;\n  if (captures = /^ago\\b/.exec(this.str)) {\n    this.skip(captures);\n    return 'ago';\n  }\n};\n\n/**\n * Number\n */\n\nparser.prototype.number = function() {\n  var captures;\n  if (captures = /^(\\d+)/.exec(this.str)) {\n    var n = captures[1];\n    this.skip(captures);\n    var mod = this.peek();\n\n    // If we have a defined modifier, then update\n    if (this.date[mod]) {\n      if ('ago' == this.peek()) n = -n;\n      this.date[mod](n);\n    } else if (this._meridiem) {\n      // when we don't have meridiem, possibly use context to guess\n      this.time(n, 0, 0, this._meridiem);\n      this._meridiem = null;\n    } else if (this.original.indexOf('at') > -1 ) {\n      this.time(n, 0, 0, this._meridiem);\n      this._meridiem = null;\n    }\n\n    return 'number';\n  }\n};\n\n/**\n * String\n */\n\nparser.prototype.string = function() {\n  var captures;\n  if (captures = /^\\w+/.exec(this.str)) {\n    this.skip(captures);\n    return 'string';\n  }\n};\n\n/**\n * Other\n */\n\nparser.prototype.other = function() {\n  var captures;\n  if (captures = /^./.exec(this.str)) {\n    this.skip(captures);\n    return 'other';\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-date.js/node_modules/date.js/lib/date.js":"/**\n * Module Dependencies\n */\n\nvar debug = require('debug')('date:date')\n\n/**\n * Time constants\n */\n\nvar _second = 1000;\nvar _minute = 60 * _second;\nvar _hour = 60 * _minute;\nvar _day = 24 * _hour;\nvar _week = 7 * _day;\nvar _year = 56 * _week;\nvar _daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n/**\n * Expose `date`\n */\n\nmodule.exports = date;\n\n/**\n * Initialize `date`\n *\n * @param {Date} offset (optional)\n * @return {Date}\n * @api publics\n */\n\nfunction date(offset) {\n  if(!(this instanceof date)) return new date(offset);\n  this._changed = {};\n  this.date = new Date(offset);\n};\n\n/**\n * Clone the current date\n */\n\ndate.prototype.clone = function() {\n  return new Date(this.date);\n}\n\n/**\n * Has changed\n *\n * @param {String} str\n * @return {Boolean}\n */\n\ndate.prototype.changed = function(str) {\n  if (this._changed[str] === undefined) return false;\n  return this._changed[str];\n};\n\n/**\n * add or subtract seconds\n *\n * @param {Number} n\n * @return {date}\n */\n\ndate.prototype.second = function(n) {\n  var seconds = +n * _second;\n  this.update(seconds);\n  this._changed['seconds'] = true;\n  return this;\n}\n\n/**\n * add or subtract minutes\n *\n * @param {Number} n\n * @return {date}\n */\n\ndate.prototype.minute = function(n) {\n  var minutes = +n * _minute;\n  this.update(minutes);\n  this._changed['minutes'] = true;\n  return this;\n}\n\n/**\n * add or subtract hours\n *\n * @param {Number} n\n * @return {date}\n */\n\ndate.prototype.hour = function(n) {\n  var hours = +n * _hour;\n  this.update(hours);\n  this._changed['hours'] = true;\n  return this;\n}\n\n/**\n * add or subtract days\n *\n * @param {Number} n\n * @return {date}\n */\n\ndate.prototype.day = function(n) {\n  var days = +n * _day;\n  this.update(days);\n  this._changed['days'] = true;\n  return this;\n}\n\n/**\n * add or subtract weeks\n *\n * @param {Number} n\n * @return {date}\n */\n\ndate.prototype.week = function(n) {\n  var weeks = +n * _week;\n  this.update(weeks);\n  this._changed['weeks'] = true;\n  return this;\n}\n\n/**\n * add or subtract months\n *\n * @param {Number} n\n * @return {Date}\n */\n\ndate.prototype.month = function(n) {\n  var d = this.date;\n  var day = d.getDate();\n  d.setDate(1);\n  var month = +n + d.getMonth();\n  d.setMonth(month);\n\n  // Handle dates with less days\n  var dim = this.daysInMonth(month)\n  d.setDate(Math.min(dim, day));\n  return this;\n};\n\n/**\n * get the days in the month\n */\n\ndate.prototype.daysInMonth = function(m) {\n  var dim = _daysInMonth[m];\n  var leap = leapyear(this.date.getFullYear());\n  return (1 == m && leap) ? 29 : 28;\n};\n\n/**\n * add or subtract years\n *\n * @param {Number} n\n * @return {date}\n */\n\ndate.prototype.year = function(n) {\n  var yr = this.date.getFullYear();\n  yr += +n;\n  this.date.setFullYear(yr);\n  this._changed['years'] = true;\n  return this;\n}\n\n/**\n * Set the time\n *\n * @param {String} h\n * @param {String} m\n * @param {String} s\n * @return {date}\n */\n\ndate.prototype.time = function(h, m, s, meridiem) {\n  if (h === false) {\n    h = this.date.getHours();\n  } else {\n    h = +h || 0;\n    this._changed['hours'] = h;\n  }\n\n  if (m === false) {\n    m = this.date.getMinutes();\n  } else {\n    m = +m || 0;\n    this._changed['minutes'] = m;\n  }\n\n  if (s === false) {\n    s = this.date.getSeconds();\n  } else {\n    s = +s || 0;\n    this._changed['seconds'] = s;\n  }\n\n  this.date.setHours(h, m, s);\n  return this;\n};\n\n/**\n * Dynamically create day functions (sunday(n), monday(n), etc.)\n */\n\nvar days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\ndays.forEach(function(day, i) {\n  date.prototype[days[i]] = function(n) {\n    this._changed['days'] = true;\n    this.updateDay(i, n);\n  };\n});\n\n/**\n * go to day of week\n *\n * @param {Number} day\n * @param {Number} n\n * @return {date}\n */\n\ndate.prototype.updateDay = function(d, n) {\n  n = +(n || 1);\n  var diff = (d - this.date.getDay() + 7) % 7;\n  if (n > 0) --n;\n  diff += (7 * n);\n  this.update(diff * _day);\n  return this;\n}\n\n/**\n * Update the date\n *\n * @param {Number} ms\n * @return {Date}\n * @api private\n */\n\ndate.prototype.update = function(ms) {\n  this.date = new Date(this.date.getTime() + ms);\n  return this;\n};\n\n/**\n * leap year\n *\n * @param {Number} yr\n * @return {Boolean}\n */\n\nfunction leapyear(yr) {\n  return (yr % 4 === 0 && yr % 100 !== 0) || yr % 400 === 0;\n}\n","/home/travis/build/npmtest/node-npmtest-date.js/node_modules/date.js/lib/norm.js":"// Module to normalize a string before parsing: map inflection words into their lemmas, using maps.json\n\n/**\n * Module Dependencies\n */\n\nvar maps = require('./maps.json')\nvar util = require('./util')\nvar _ = require('./subdash')\n\n/**\n * Export `norm`\n */\n\nmodule.exports = norm\n\n/**\n * Regexes for Subnormal forms\n */\n\nvar re = {\n  // 12/20 - 12/21, 2012/12 - 2013/12\n  MMsDDdMMsDD: /(?!\\d{1,4}\\/\\d{1,4}\\s*-\\s*\\d{1,4}\\/\\d{1,4}\\/)(\\d{1,4})\\/(\\d{1,4})\\s*-\\s*(\\d{1,4})\\/(\\d{1,4})/g,\n  // 12/22 - 23, 2012/10 - 12\n  MMsDDdDD: /(?!\\d{1,4}\\/\\d{1,4}\\s*-\\s*\\d{1,4}\\/)(\\d{1,4})\\/(\\d{1,4})\\s*-\\s*(\\d{1,4})/g,\n  // 12/24, 2012/12\n  MMsDD: /(?!\\d{1,4}\\/\\d{1,4}\\/)(\\d{1,4})\\/(\\d{1,4})/g,\n  // 05:30pm, 0530pm, 1730, 1730pm, 1730[re:h], remove the [re:h]\n  hhcmm: /(\\s+\\d{1,2}|^\\d{1,2})\\:?(\\d{2})\\s*(\\S+)*/g\n}\n\n/**\n * Return the normalized string.\n * Algo: Parse and get norm a string into array of valid CFG symbols, in these steps:\n * 1. parse normal forms\n * 2. parse subnormal forms\n * 3. parse english forms\n * @param  {string} str The input string.\n * @return {string}     Normalized string\n */\nfunction norm(str) {\n  str = (' ' + str).replace(/\\s+(\\d+)([a-zA-Z]+)/g, ' $1 $2').replace(/\\s+/g, ' ').replace(/^\\s/, '').replace(/^\\s/, '')\n  var pStr = parseNormalSubnormal(str)\n  var tokens = pStr.split(' ');\n  // 3. parse english forms\n  // var symbols = _.map(tokens, lemma)\n  var skip = false;\n  var symbols = [];\n  _.each(tokens, function(tok, i) {\n    // skip this once, reset skip\n    if (skip) {\n      skip = false;\n      return 1;\n    }\n    var oneGram = tok,\n      twoGram = tok + ' ' + (tokens[i + 1] || ''),\n      oneLemma = lemma(oneGram),\n      twoLemma = lemma(twoGram);\n    if (twoLemma != twoGram && oneLemma != oneGram) {\n      // if lemmatization must happen for both,\n      // pick the longer, skip next token\n      skip = true;\n      symbols.push(twoLemma);\n    } else {\n      symbols.push(oneLemma);\n    }\n  })\n  return symbols.join(' ')\n}\n// var str = \"an seven hour 7h 05 October 2011 14:48 UTC 08/11 2020 2012/12 event is at tonight 12/20- 23 12/22 - 12/23 12/22 - 12/25 05:30h 17:30h 1730 1730pm 5pm 1st\"\n// var str = '2nd day of January 12:30'\n// console.log(norm(str))\n\n\n/**\n * Return the lemma symbol of a word string, i.e. the name and value of the symbol it belongs to in the CFG. Uses ./maps.json.\n * NLP Lemmatization refers here: htp://nlp.stanford.edu/Ir-book/html/htmledition/stemming-and-lemmatization-1.html. Inflections = all possible alternative words of a lemma.\n * @param  {string} str the word to lemmatize.\n * @return {JSON}     the lemma symbol {name, value} for CFG\n * @example\n * lemma('zero')\n * // => { value: '0', name: 'n' }[value]\n */\nfunction lemma(str) {\n  var lem = {}\n  var name = _.findKey(maps, function(sMap) {\n    var value = _.findKey(sMap, function(inflectionArr) {\n      return _.includes(inflectionArr, str)\n    })\n    if (value) { lem['value'] = value };\n    return value\n  })\n  lem['name'] = name;\n  // return lemma or the original of not lemmatized\n  return (lem.value || str)\n}\n\n/**\n * Run 1. parseNormal then 2. parseSubnormal, return the parsed string with T-format tokens.\n * @private\n * @param  {string} str The input string\n * @return {string}     Parsed string\n */\nfunction parseNormalSubnormal(str) {\n  var p1 = parseNormal(str);\n  var ntokens = _.filter(p1.dateStrArr, notSubnormal)\n    // the proper, 1st parsed normal string\n  var p1Str = injectNormal(str, ntokens)\n  var p2Str = parseSubnormal(p1Str)\n  return p2Str\n}\n\n/**\n * 1. Parse normal forms. Try to parse and return a normal Date, parseable from new Date(str), by continuously trimming off its tail and retry until either get a valid date, or string runs out.\n * Doesn't parse string with length <5\n * @private\n * @param  {string} str The input string.\n * @return {string}     A Date in ISO string, or null.\n */\nfunction parseNormal(str) {\n  // keep chopping off tail until either get a valid date, or string runs out\n  // array of parsed date and the string consumed\n  var dateArr = [],\n    dateStrArr = [];\n  // ensure single spacing\n  str = str.replace(/\\s+/g, ' ');\n  // tokenize by space\n  var strArr = str.split(/\\s+/g);\n\n  // init the normalDate and head string used\n  var normalDate = null,\n    head = '';\n  // do while there's still string to go\n  while (!_.isEmpty(strArr)) {\n    head = _.trim(head + ' ' + strArr.shift());\n    try {\n      normalDate = new Date(head).toISOString();\n      // Extend head: if parse successful, extend continuously until failure, then that's the longest parseable head string, ...<date>\n      var advanceHead = head + ' ' + strArr[0]\n      while (1) {\n        try {\n          var advanceDate = new Date(advanceHead).toISOString();\n          if (advanceDate != 'Invalid Date') {\n            // if advanceDate is parseable, set to current, update heads\n            var normalDate = advanceDate;\n            head = head + ' ' + strArr.shift()\n            advanceHead = advanceHead + ' ' + strArr[0]\n          } else {\n            break;\n          }\n        } catch (e) {\n          // when fail, just break\n          break;\n        }\n      }\n      // Shrink head: from the whole parseable head ...<date>, trim front till we get <date>\n      while (1) {\n        try {\n          if (new Date(head.replace(/^\\s*\\S+\\s*/, '')).toISOString() != normalDate) {\n            // front token eaten causes change, dont update head\n            break;\n          } else {\n            // update head\n            head = head.replace(/^\\s*\\S+\\s*/, '');\n          }\n        } catch (e) {\n          break;\n        }\n      }\n      // only consider a valid parse if the parsed str is long enough\n      if (head.length > 4 && !/\\d+\\.\\d+/.exec(head)) {\n        dateArr.push(normalDate);\n        // get head = <date> only, then reset\n        dateStrArr.push(head)\n      }\n      head = ''\n    } catch (e) {}\n  }\n  return { dateArr: dateArr, dateStrArr: dateStrArr };\n}\n\n/**\n * 2. Parse subnormal forms after parseNormal. Gradually replace tokens of the input string while parseable.\n * @private\n * @param  {string} str The input string.\n * @return {string}     The parsed string.\n */\nfunction parseSubnormal(str) {\n  var m, res;\n  if (m = re.MMsDDdMMsDD.exec(str)) {\n    // 12/20 - 12/21\n    var yMd1 = yMdParse(m[1], m[2]);\n    var yMd2 = yMdParse(m[3], m[4]);\n    res = 't:' + yMd1 + ',dt: - t:' + yMd2 + ',dt: '\n  } else if (m = re.MMsDDdDD.exec(str)) {\n    // 12/22 - 23\n    var yMd1 = yMdParse(m[1], m[2]);\n    var yMd2 = yMdParse(m[1], m[3]);\n    res = 't:' + yMd1 + ',dt: - t:' + yMd2 + ',dt: '\n  } else if (m = re.MMsDD.exec(str)) {\n    // if year\n    var yMd = yMdParse(m[1], m[2])\n      // 12/24\n    res = 't:' + yMd1 + ',dt: '\n  } else if (m = re.hhcmm.exec(str)) {\n    // 05:30pm, 0530pm, 1730, 1730pm, 1730[re:h], remove the [re:h]\n    res = ' ' + _.trim(m[1]) + \":\" + m[2] + (m[3] || '')\n  } else {\n    // exit recursion if hits here\n    return str\n  }\n  // recurse down till no more substitution (CFG is not cyclic, so ok)\n  str = parseSubnormal(str.replace(m[0], res))\n  return str\n}\n\n//////////////////////\n// Helper functions //\n//////////////////////\n\n/**\n * Try to parse two tokens for T form into MM/dd, or MM/yyyy if either token hsa length 4.\n * @private\n * @param  {string} token1\n * @param  {string} token2\n * @return {string}        in the form <y><M><d>\n */\nfunction yMdParse(token1, token2) {\n  var part = _.partition([token1, token2], function(token) {\n    return token.length == 4\n  })\n  var y = part[0][0] ? part[0][0] + 'y' : '';\n  var M = part[1][0] + 'M';\n  var d = part[1][1] ? part[1][1] + 'd' : '';\n  return y+M+d\n}\n/**\n * Check if the dateStr is strictly normal and not subnormal. Used to extract parseSubnormal overrides.\n * @private\n * @param  {string} dateStr\n * @return {Boolean}\n */\nfunction notSubnormal(dateStr) {\n  var subnormalStr = parseSubnormal(dateStr)\n    // remove T and see if still has words\n  var noT = subnormalStr.replace(/t\\:\\S*,dt\\:\\S*(\\s*-\\s*t\\:\\S*,dt\\:\\S*)?/, '')\n  return /\\w+/g.exec(noT) != null\n}\n\n/**\n * Given a string and array of its parsed phrases, convert them into T ISO UTC then T format, and inject into the original string, return.\n * @private\n * @param  {string} str       The original string.\n * @param  {Array} parsedArr The parsed phrases from the string.\n * @return {string}           The string with parsed phrases replaced in T format.\n *\n * @example\n * injectNormal('05 October 2011 14:48 UTC 08/11 2020', [ '05 October 2011 14:48 UTC', '08/11 2020' ])\n * // => 't:2011y10M05d14h48m00.000s,dt: t:2020y08M11d04h00m00.000s,dt: '\n */\nfunction injectNormal(str, parsedArr) {\n  _.each(parsedArr, function(parsed) {\n    var T = util.ISOtoT(new Date(parsed).toISOString())\n    str = str.replace(parsed, T)\n  })\n  return str;\n}\n","/home/travis/build/npmtest/node-npmtest-date.js/node_modules/date.js/lib/util.js":"/**\n * Module Dependencies\n */\n\nvar maps = require('./maps.json')\n\n/**\n * Convert ISO UTC string to T format.\n * @param {string} str ISO UTC date string\n *\n * @example\n * ISOtoT('2011-10-05T14:48:00.000Z')\n * // => 't:08M11d,dt:'\n */\nfunction ISOtoT(str) {\n  var datetime = str.replace('Z', '').split('T')\n  var date = datetime[0].split('-'),\n    time = datetime[1].split(':');\n  return 't:' + date[0] + 'y' + date[1] + 'M' + date[2] + 'd' + time[0] + 'h' + time[1] + 'm' + time[2] + 's,dt:'\n}\n\n/**\n * Convenient method to get current time in T format.\n * @return {string} T format string.\n */\nfunction nowT() {\n  var dateStr = new Date().toISOString();\n  return ISOtoT(dateStr)\n}\n\n// The ordering of time units, small to large\nvar timeUnitOrder = [\"ms\", \"s\", \"m\", \"h\", \"d\", \"w\", \"M\", \"y\"]\n\n\nmodule.exports = {\n  ISOtoT: ISOtoT,\n  nowT: nowT,\n  timeUnitOrder: timeUnitOrder,\n}\n","/home/travis/build/npmtest/node-npmtest-date.js/node_modules/date.js/lib/subdash.js":"/**\n * Use only the lodash methods that we need\n */\n\nexports.partition = require('lodash.partition')\nexports.includes = require('lodash.includes')\nexports.findKey = require('lodash.findkey')\nexports.isEmpty = require('lodash.isempty')\nexports.filter = require('lodash.filter')\nexports.each = require('lodash.foreach')\nexports.trim = require('lodash.trim')\n"}